#! /bin/sh

# Outputs debian-cd task lists to
# $CDIMAGE_ROOT/scratch/$PROJECT/$IMAGE_TYPE/tasks/.

export CDIMAGE_ROOT="${CDIMAGE_ROOT:-/srv/cdimage.ubuntu.com}"
. "$CDIMAGE_ROOT/etc/config"

if [ -z "$1" ]; then
	echo 'Usage: germinate-to-tasks IMAGE_TYPE' >&2
	exit 1
fi
IMAGE_TYPE="$1"

GERMINATE_OUT="$CDIMAGE_ROOT/scratch/$PROJECT/$IMAGE_TYPE/germinate"
TASKS_OUT="$CDIMAGE_ROOT/scratch/$PROJECT/$IMAGE_TYPE/tasks"

if [ "$IMAGE_TYPE" = source ]; then
	if [ "$SOURCE_PROJECT" ]; then
		GERMINATE_OUT="$GERMINATE_OUT/$SOURCE_PROJECT"
		PROJECT="$SOURCE_PROJECT"
	else
		mkemptydir "$TASKS_OUT/$DIST"

		# Generate task output for all source projects.
		for project in $ALL_PROJECTS; do
			SOURCE_PROJECT="$project" germinate-to-tasks "$@"
			for x in "$TASKS_OUT/$DIST"/*; do
				base="$(basename "$x")"
				case $base in
					*:*)	;;
					*)
						mv "$x" "$TASKS_OUT/$DIST/$project:$base"
						;;
				esac
			done
			sed -i "s,\\(.*<\\)[^/]*\\(.*/\\),\\1$PROJECT\\2$project:," "$TASKS_OUT/$DIST/$project:MASTER"
		done

		# Make a super-master task file.
		exec > "$TASKS_OUT/$DIST/MASTER"
		for project in $ALL_PROJECTS; do
			echo "#include <$PROJECT/$DIST/$project:MASTER>"
		done
		exit 0
	fi
else
	mkemptydir "$TASKS_OUT/$DIST"
fi

# ubuntu-server really wants ubuntu-* tasks.
case $PROJECT in
	ubuntu-server)
		TASKPROJECT=ubuntu
		;;
	*)
		TASKPROJECT="$PROJECT"
		;;
esac

for seed in $(list-seeds "$GERMINATE_OUT/$DIST/STRUCTURE" all); do
	if [ "$seed" = supported ]; then
		seedsource="$seed+build-depends"
	else
		seedsource="$seed"
	fi
	for arch in $ARCHES; do
		[ -e "$GERMINATE_OUT/$DIST/$arch/$seedsource" ] || continue
		< "$GERMINATE_OUT/$DIST/$arch/$seedsource" \
			tail -n +3 | head -n -2 | cut -d' ' -f1 \
			> "$GERMINATE_OUT/$DIST/$arch/$seedsource.packages"
	done
done

# Hackily exclude kernel-image-* from the installer and casper tasks. Those
# udebs only exist to satisfy dependencies when building the
# debian-installer package.
for seed in $(list-seeds "$GERMINATE_OUT/$DIST/STRUCTURE" installer); do
	for arch in $ARCHES; do
		grep -v ^kernel-image- "$GERMINATE_OUT/$DIST/$arch/$seed.packages" \
			> "$GERMINATE_OUT/$DIST/$arch/$seed.packages.new"
		mv "$GERMINATE_OUT/$DIST/$arch/$seed.packages.new" \
			"$GERMINATE_OUT/$DIST/$arch/$seed.packages"
	done
done

# germinate doesn't yet support subarchitecture specifications, so we need
# to hack the boot and installer seeds a bit for powerpc+ps3 (only gutsy).
case $DIST in
	gutsy)
		for arch in $ARCHES; do
			[ "$arch" = powerpc+ps3 ] || continue
			for seed in $(list-seeds "$GERMINATE_OUT/$DIST/STRUCTURE" installer); do
				sed -i '/-powerpc-di/d; s/-powerpc64-smp-di/-cell-di/g' \
					"$GERMINATE_OUT/$DIST/$arch/$seed.packages"
			done
			sed -i '/^linux-\(restricted\|ubuntu\)-modules/d; /^[^ ]*-powerpc /d; s/-powerpc64-smp/-cell/g' \
				"$GERMINATE_OUT/$DIST/$arch/boot.packages"
		done
		;;
esac

initrd_packages () {
	manifest="$(find-mirror $2)/dists/$DIST/main/installer-$2/current/images/MANIFEST.udebs"
	[ "$manifest" ] || return
	case $1 in
		./*)
			initrd="${1#./}"
			;;
		*)
			initrd="$1"
			;;
	esac
	INITRD="$initrd" perl -ne 'if (m[^$ENV{INITRD}].../^[^\s]/ and /^\s/) {
		print((split)[0], "\n")
	}' "$manifest" | sort -u
}

if dist_ge jaunty; then
	# Remove installer packages that are in both the cdrom and
	# netboot initrds; there's no point duplicating these.
	for arch in $ARCHES; do
		cpuarch="${arch%%+*}"
		cdrom=
		netboot=
		subarches=.
		case $cpuarch in
			amd64|i386|lpia)
				cdrom=cdrom/initrd.gz
				netboot=netboot/netboot.tar.gz
				;;
			hppa)
				cdrom=cdrom/2.6/initrd.gz
				netboot=netboot/2.6/boot.img
				;;
			ia64)
				cdrom=cdrom/boot.img
				netboot=netboot/netboot.tar.gz
				;;
			powerpc)
				cdrom=cdrom/initrd.gz
				netboot=netboot/initrd.gz
				subarches='powerpc powerpc64'
				;;
			sparc)
				cdrom=cdrom/initrd.gz
				netboot=netboot/initrd.gz
				;;
		esac
		if [ "$cdrom" ] && [ "$netboot" ]; then
			for subarch in $subarches; do
				initrd_packages "$subarch/$cdrom" "$cpuarch" > "$GERMINATE_OUT/$DIST/$arch/installer.packages.cdrom"
				initrd_packages "$subarch/$netboot" "$cpuarch" > "$GERMINATE_OUT/$DIST/$arch/installer.packages.netboot"
				for seed in $(list-seeds "$GERMINATE_OUT/$DIST/STRUCTURE" all); do
					if [ "$seed" = supported ]; then
						seedsource="$seed+build-depends"
					else
						seedsource="$seed"
					fi
					join "$GERMINATE_OUT/$DIST/$arch/installer.packages.cdrom" "$GERMINATE_OUT/$DIST/$arch/installer.packages.netboot" | \
						join -v1 "$GERMINATE_OUT/$DIST/$arch/$seedsource.packages" - \
						> "$GERMINATE_OUT/$DIST/$arch/$seedsource.packages.new"
					mv "$GERMINATE_OUT/$DIST/$arch/$seedsource.packages.new" \
						"$GERMINATE_OUT/$DIST/$arch/$seedsource.packages"
				done
			done
		fi
	done
fi

for seed in $(list-seeds "$GERMINATE_OUT/$DIST/STRUCTURE" all); do
	exec >"$TASKS_OUT/$DIST/$seed"
	if [ "$seed" = supported ]; then
		seedsource="$seed+build-depends"
	else
		seedsource="$seed"
	fi
	for arch in $ARCHES; do
		cpparch="$(echo "$arch" | sed 's/+/_/g')"
		if [ -e "$GERMINATE_OUT/$DIST/$arch/$seedsource.packages" ]; then
			echo "#ifdef ARCH_$cpparch"
			cat "$GERMINATE_OUT/$DIST/$arch/$seedsource.packages"
			echo "#endif /* ARCH_$cpparch */"
		fi
	done
done

# Help debian-cd to regenerate Task headers, to make sure that we don't
# accidentally end up out of sync with the archive and break the package
# installation step. In breezy, also generate Archive-Copier-Set headers for
# sets of packages that archive-copier needs to know to copy but that shouldn't
# appear as tasks in aptitude et al.
# Note that the results of this will be wrong for source images, but that
# doesn't matter since they won't be used there.
for arch in $ARCHES; do
	exec >"$TASKS_OUT/$DIST/tasks.$arch"
	for seed in $(list-seeds "$GERMINATE_OUT/$DIST/STRUCTURE" all); do
		if dist_le dapper; then
			# Tasks implemented by hand.
			case $seed in
				boot|required|server-ship)
					continue
					;;
				server)
					case $PROJECT in
						edubuntu)
							;;
						*)
							continue
							;;
					esac
					;;
				ship)
					case $DIST in
						warty|hoary|breezy)
							;;
						*)
							continue
							;;
					esac
					;;
			esac
			case $seed in
				base|minimal|standard|desktop|server|ship)
					task="$TASKPROJECT-$seed"
					;;
				*)
					task="$seed"
					;;
			esac
			input_seeds="$seed"
		elif dist_le gutsy; then
			# Tasks implemented via tasksel, but without
			# Task-Seeds; hacks required for seed/task
			# mapping.
			case $seed in
				required)
					task=minimal
					;;
				*)
					task="$seed"
					;;
			esac
			grep -iq '^Task-.*:' "$GERMINATE_OUT/$DIST/$arch/$task.seedtext" || \
				continue
			if grep -iq '^Task-Per-Derivative:' "$GERMINATE_OUT/$DIST/$arch/$task.seedtext"; then
				task="$TASKPROJECT-$task"
			fi
			input_seeds="$seed"
		else
			# Tasks implemented via tasksel, with
			# Task-Seeds to indicate task/seed mapping.
			task="$seed"
			grep -iq '^Task-.*:' "$GERMINATE_OUT/$DIST/$arch/$task.seedtext" || \
				continue
			if grep -iq '^Task-Seeds:' "$GERMINATE_OUT/$DIST/$arch/$task.seedtext"; then
				input_seeds="$seed $(grep -i '^Task-Seeds:' "$GERMINATE_OUT/$DIST/$arch/$task.seedtext" | sed 's/^[^:]*: *//')"
			else
				input_seeds="$seed"
			fi
			if grep -iq '^Task-Per-Derivative:' "$GERMINATE_OUT/$DIST/$arch/$task.seedtext"; then
				# Edubuntu is odd; it's structured
				# as an add-on to Ubuntu, so
				# sometimes we need to create
				# ubuntu-* tasks. At the moment I
				# don't see a better approach than
				# hardcoding the task names.
				case $PROJECT/$task in
					edubuntu/desktop|edubuntu/live)
						task="ubuntu-$task"
						;;
					*)
						task="$TASKPROJECT-$task"
						;;
				esac
			fi
		fi
		for input_seed in $input_seeds; do
			sed "s/\$/ $task/" "$GERMINATE_OUT/$DIST/$arch/$input_seed.packages"
		done
	done
	if [ "$DIST" = breezy ]; then
		exec >"$TASKS_OUT/$DIST/acsets.$arch"
		if [ -e "$GERMINATE_OUT/$DIST/$arch/ship.acsets" ]; then
			for acset in $(< "$GERMINATE_OUT/$DIST/$arch/ship.acsets"); do
				< "$GERMINATE_OUT/$DIST/$arch/$acset" \
					tail -n +3 | head -n -2 | cut -d' ' -f1 | \
					sed "s/\$/ $acset/"
			done
		fi
	fi
	exec >"$TASKS_OUT/$DIST/override.$arch"
	perl -alne '
		push @{$tasks{$F[0]}}, $F[1];
		END {
			for my $pkg (sort keys %tasks) {
				print "$pkg  Task  ", join(", ", @{$tasks{$pkg}});
			}
		}' "$TASKS_OUT/$DIST/tasks.$arch"
	if [ "$DIST" = breezy ]; then
		perl -alne '
			push @{$acsets{$F[0]}}, $F[1];
			END {
				for my $pkg (sort keys %acsets) {
					print "$pkg  Archive-Copier-Set  ", join(", ", @{$acsets{$pkg}});
				}
			}' "$TASKS_OUT/$DIST/acsets.$arch"
	fi
done

# Help debian-cd to get priorities in sync with the current base system,
# so that debootstrap >= 0.3.1 can work out the correct set of packages
# to install.
for arch in $ARCHES; do
	exec >"$TASKS_OUT/$DIST/important.$arch"
	for seed in $(list-seeds "$GERMINATE_OUT/$DIST/STRUCTURE" debootstrap); do
		egrep -v '^(linux-(image|restricted|amd64|386|686|k7|power|ia64|itanium|mckinley|sparc|hppa|imx51|dove|omap).*|nvidia-kernel-common|grub|yaboot|efibootmgr|elilo|silo|palo)$' \
			"$GERMINATE_OUT/$DIST/$arch/$seed.packages" || true
	done
done

# Make the master task file for debian-cd.
make-master-task "$GERMINATE_OUT/$DIST/STRUCTURE" > "$TASKS_OUT/$DIST/MASTER"
