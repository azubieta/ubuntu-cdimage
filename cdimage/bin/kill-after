#! /usr/bin/python

from __future__ import print_function

import sys
import os
import signal


def usage(stream, code):
    print("""\
Usage: kill-after number-of-seconds command [argument ...]""", file=stream)
    sys.exit(code)


if len(sys.argv) < 3:
    usage(sys.stderr, 1)
if sys.argv[1] == '--help':
    usage(sys.stdout, 0)
try:
    int(sys.argv[1])
except ValueError:
    usage(sys.stderr, 1)


def sigalrm_handler(signum, frame):
    print("%s took too long, terminating ..." % sys.argv[2], file=sys.stderr)
    os.kill(-pid, signal.SIGTERM)


def sigchld_handler(signum, frame):
    _, status = os.waitpid(pid, 0)
    if os.WIFEXITED(status):
        os._exit(status)
    else:
        print("child exited with signal %d" % os.WTERMSIG(status),
              file=sys.stderr)
        os._exit(os.WTERMSIG(status) + 128)


old_sigalrm = signal.signal(signal.SIGALRM, sigalrm_handler)
old_sigchld = signal.signal(signal.SIGCHLD, sigchld_handler)

pid = os.fork()
if pid == 0:
    # child
    signal.signal(signal.SIGALRM, old_sigalrm)
    signal.signal(signal.SIGCHLD, old_sigchld)
    os.setpgid(0, 0)
    print(sys.argv)
    os.execvp(sys.argv[2], sys.argv[2:])

# prevent race by setting process group on either side; cf. Stevens 1993
try:
    os.setpgid(pid, 0)
except OSError:
    # may fail if the child has already execed
    pass

signal.alarm(int(sys.argv[1]))
while True:
    signal.pause()
